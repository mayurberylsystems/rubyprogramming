--In ruby puts keyword is used for printing the output.

example-puts "hello world"



--Ruby BEGIN Statement--Declares code to be called before the program is run.

Syntax-->>BEGIN {   code   }



--Ruby END Statement--Declares code to be called at the end of the program

Syntax-->>END {   code   }

		
				a small rubyprogram 

puts "This is main Ruby Program"

END {
   puts "Terminating Ruby Program"
}
BEGIN {
   puts "Initializing Ruby Program"
}


output------->>Initializing Ruby Program
	       This is main Ruby Program
	       Terminating Ruby Program



--comments are written after #.other way of mentioning comments is to write them in between '= begin' and '= end'.





							VARIABLES N CONSTANTS
							---------------------


--Variables in a Ruby Class.
  
  Ruby provides four types of variables −

    Local Variables − Local variables are the variables that are defined in a method. Local variables are not available outside the method.Local variables begin with a lowercase letter or _. Their values ramain intact until and unless they are't used outside the block in which they are defined.	

    Instance Variables − Instance variables are available across methods for any particular instance or object. That means that instance variables change from object to object. Instance variables are preceded by the at sign (@) followed by the variable name.

    Class Variables − Class variables are available across different objects. A class variable belongs to the class and is a characteristic of a class. They are preceded by the sign @@ and are followed by the variable name.

    Global Variables − Class variables are not available across classes. If you want to have a single variable, which is available across classes, you need to define a global variable. The global variables are always preceded by the dollar sign ($).



--Ruby Constants-Constants begin with an uppercase letter. Constants defined within a class or module can be accessed from within that class or module, and those defined outside a class or module can be accessed globally. Their values generally are displayed by using, say for 'CON' we say---> puts "value of CON : #{CON}".Therefore result of any expression after calculation can be displayed using #{exp} in puts.





							CLASS AND OBJECT
							----------------


--CLASS in ruby.
	
  A class in Ruby always starts with the keyword class followed by the name of the class. The name should always be in initial capitals and it terminates with the keyword end. ex-The class Customer can be displayed as:

class Customer
end


--Creating Objects in Ruby using new Method

  Here is the example to create two objects cust1 and cust2 of the class Customer −

cust1 = Customer. new
cust2 = Customer. new

-Custom Method to Create Ruby Objects

When we plan to declare the new method with parameters, you need to declare the method initialize at the time of the class creation.

The initialize method is a special type of method, which will be executed when the new method of the class is called with parameters.

Here is the example to create initialize method:
 ex-
class Customer
   @@no_of_customers = 0
   def initialize(id, name, addr)
      @cust_id = id
      @cust_name = name
      @cust_addr = addr
   end
end

-The object then is created as by passing arguments into the new keyword:

ex-
cust1 = Customer.new("1", "John", "Wisdom Apartments, Ludhiya")
cust2 = Customer.new("2", "Poul", "New Empire road, Khandala")



--Member Functions in Ruby Class

functions are called methods. Each method in a class starts with the keyword def followed by the method name.

The method name always preferred in lowercase letters. You end a method in Ruby by using the keyword end.

ex-
class Sample
   def hello()
      puts "Hello Ruby!"
   end
end

# Now using above class to create objects
ex-

object = Sample. new
object.hello()

-this will give output as-->>Hello Ruby!



--we use '#' in order to display the value of any method variable.

ex-
def display()
		puts "Customer id #@cust_id"
		puts "Customer name #@cust_name"
		puts "Customer address #@cust_addr"
	end



							OPERATORS
							---------	

operators are similar to that of C programming.The one which are different are mentioned below.

Arithmatic:
-->> a**b:mean a raise to the power b.

Comparison:
-->> ===: used to test equality. for ex- (1..10)===5 returns true 
-->> .eql?:True if the receiver and argument have both the same type and equal values. ex-->> 1 == 1.0 returns true, but 1.eql?(1.0) is false.
-->> equal?:True if the receiver and argument have the same object id. ex-->> if aObj is duplicate of bObj then aObj == bObj is true, a.equal?bObj is false but a.equal?aObj is true.

Parallel Assignment:
a = 10
b = 20
c = 30

This may be more quickly declared using parallel assignment −

a, b, c = 10, 20, 30

Parallel assignment is also useful for swapping the values held in two variables −

a, b = b, c



							RANGE
						        -----
.. : '..' create a range including the argument as well.

ex--->> (1..10) will give range from 1 to 10 including 10 as well.

... : '...' this will exclude 10 from the range.

producing range list on display---->> (1..10).to_a



--DOT operator or '.' is used for calling a method by using its class name. ex y=Trig.sin() will call the method sin of class Trig.

--double colon or '::' allows constants, instance methods and class methods defined within a class or module, to be accessed from anywhere outside the class or module.
ex---->> ::MR_COUNT = 1  will set the constant of main object class to value 1.
	 Foo::MR_COUNT=10   will set the constant of class FOO to 10.




IF_ELSE is similar to c programming.


